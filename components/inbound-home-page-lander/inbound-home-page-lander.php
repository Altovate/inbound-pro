<?php/*Plugin Name: Landing Pages Extension - Use Landing Page as HomepagePlugin URI: http://www.inboundnow.com/landing-pages/Description: Adds an option to select landing page as default homepage in Settings->ReadingAuthor: Hudson Atwell, David WellsVersion: 1.1.2Author URI: http://www.inboundnow.com*/if(!defined('LP_HOMEPAGE_CURRENT_VERSION')) { define('LP_HOMEPAGE_CURRENT_VERSION', '1.1.2' ); }if(!defined('LP_HOMEPAGE_LABEL')) { define('LP_HOMEPAGE_LABEL' , 'Use Landing Page as Homepage' ); }if(!defined('LP_HOMEPAGE_SLUG')) { define('LP_HOMEPAGE_SLUG' , plugin_basename( dirname(__FILE__) ) );}if(!defined('LP_HOMEPAGE_REMOTE_ITEM_NAME')) { define('LP_HOMEPAGE_REMOTE_ITEM_NAME', 'use-landing-page-as-homepage' );}if(!defined('LP_HOMEPAGE_URLPATH')) { define('LP_HOMEPAGE_URLPATH', WP_PLUGIN_URL.'/'.plugin_basename( dirname(__FILE__) ).'/' );}if(!defined('LP_HOMEPAGE_PATH')) { define('LP_HOMEPAGE_PATH', WP_PLUGIN_DIR.'/'.plugin_basename( dirname(__FILE__) ).'/' );}if (!class_exists('Home_Page_Lander')) {	class Home_Page_Lander {		private static $instance;		private  $homepage_lander;		private  $front_page_id;		private  $variations;		private  $marker;		private  $next_marker;		/* Load Filters */		public static function instance() {			if ( ! isset( self::$instance ) && ! ( self::$instance instanceof Home_Page_Lander ) ) {				self::$instance = new Home_Page_Lander;				self::$instance->front_page_id = get_option('page_on_front');				self::$instance->load_hooks();			}			return self::$instance;		}		public function load_hooks() {			/* Setup Licensing & Updating */			add_action('admin_init', array( __CLASS__ , 'extension_setup'));			/* Add Landing Pages to 'Reading' Settings Page */			add_filter( 'get_pages',  array( __CLASS__ , 'add_landing_pages_to_homepage_select_dropdown' ));			//tamper with homepage query to call custom post type post if set			add_action( 'pre_get_posts', array( __CLASS__ , 'hack_front_page_query' ));			//make sure the correct template is called			add_action("template_redirect", array( __CLASS__ , 'set_front_page_template'));		}		//add custom post type posts to static page options		public static function add_landing_pages_to_homepage_select_dropdown( $pages ) {			if(is_admin()){				 $my_pages = new WP_Query( array( 'post_type' => 'landing-page', 'posts_per_page' => '99' ) );				//print_r($my_pages);				 if ( $my_pages->post_count > 0 ) {					 $pages = array_merge( $pages, $my_pages->posts );				 }			}			return $pages;		}		//tamper with homepage query to call custom post type post if set		public static function hack_front_page_query( $query ){			if (isset($query->query['post_type'])) {				return;			}			$current_url = "http://".$_SERVER["HTTP_HOST"].$_SERVER["REQUEST_URI"]."";			$wordpress_url = get_bloginfo('wpurl' );			$current_url = str_replace('/','',$current_url);			$wordpress_url = str_replace('/','',$wordpress_url);			if (($current_url==$wordpress_url)&& self::$instance->front_page_id!=0) {				$query->query_vars['post_type'] = array( 'page','landing-page' );				$query->query_vars['ID'] = self::$instance->front_page_id;			}		}		//make sure the correct template is called		public static function set_front_page_template() {			global $post;			if (!isset($post)){return;}			$this_id =  $post->ID;			if ($this_id == self::$instance->front_page_id && is_singular('landing-page') && self::$instance->front_page_id!=0) {				$template = get_post_meta($post->ID, 'lp-selected-template', true);				self::$instance->variations = self::load_variations();				self::$instance->marker = self::load_marker();				$_REQUEST['lp-variation-id'] = self::discover_next_variation(self::$instance->front_page_id);				if ($post->post_type == "landing-page") {					if (strstr($template,'-slash-')) {						$template = str_replace('-slash-','/',$template);					}					$my_theme =  wp_get_theme($template);					if ($my_theme->exists()) {						return "";					} else if ($template!='default') {						$template = str_replace('_','-',$template);						if (file_exists(LANDINGPAGES_PATH.'templates/'.$template.'/index.php')) {							include(LANDINGPAGES_PATH.'templates/'.$template.'/index.php');							die();						} else {							include(LANDINGPAGES_UPLOADS_PATH.$template.'/index.php');							die();						}					}				}			}		}		/* Loads an Array of Active Variations Associated with Landing Page */		private static function load_variations() {			$live_variations = array();			$variations_string = get_post_meta( self::$instance->front_page_id , 'lp-ab-variations' , true );			$variations = explode(',',$variations_string);			$variations = array_filter($variations,'is_numeric');			/* Check the Status of Each Variation and Keep Live Ones */			foreach ($variations as $key=>$vid) {				if ($vid==0) {					$variation_status = get_post_meta( self::$instance->front_page_id , 'lp_ab_variation_status' , true );				} else 	{					$variation_status = get_post_meta( self::$instance->front_page_id , 'lp_ab_variation_status-'.$vid , true );				}				if (!is_numeric($variation_status) || $variation_status==1) {					$live_variations[] = $vid;				}			}			return $live_variations;		}		/* Loads Variation ID of Last Variation Loaded */		private static function load_marker() {			$marker = get_post_meta( self::$instance->front_page_id , 'lp-ab-variations-marker' , true );			if ( !is_numeric($marker) || !in_array( $marker , self::$instance->variations ) ) {				$marker = current(self::$instance->variations);			}			return $marker;		}		/* Discovers Next Variation in Line */		private static function discover_next_variation() {			/* Set Pointer to Correct Location in Variations Array */			while ( self::$instance->marker != current( self::$instance->variations) ) {				next(self::$instance->variations);			}			/* Discover the next variation in the array */			next(self::$instance->variations);			/* If the pointer is empty then reset array */			if ( !is_numeric(current( self::$instance->variations ) ) ) {				reset( self::$instance->variations );			}			/* Save as Historical Data */			update_post_meta( self::$instance->front_page_id , 'lp-ab-variations-marker' , current( self::$instance->variations ) );			return current( self::$instance->variations );		}		public static function extension_setup() {			/*PREPARE THIS EXTENSION FOR LICESNING*/			if ( class_exists( 'LP_EXTENSION_LICENSE' ) ) {				$license = new LP_EXTENSION_LICENSE( LP_HOMEPAGE_LABEL , LP_HOMEPAGE_REMOTE_ITEM_NAME );			}			/*PREPARE THIS EXTENSION FOR AUTOMATIC UPDATES*/			if ( class_exists( 'LP_EXTENSION_UPDATER' ) ) {				$edd_updater = new LP_EXTENSION_UPDATER( LANDINGPAGES_STORE_URL, __FILE__, array(					'version'   => LP_HOMEPAGE_CURRENT_VERSION, /* current version number of extension */					'license'   => trim(get_option( 'lp-license-keys-'.LP_HOMEPAGE_REMOTE_ITEM_NAME )), /* to retrieve license keys we use the following as the option id: 'lp-license-key-' + 'id' as defined above in lp_add_option() above. You can leave this alone.*/					'item_name' => LP_HOMEPAGE_REMOTE_ITEM_NAME, /* permalink name of this extension on inboundnow.com/landing-pages/ store. Leave this line alone */					'nature'    => 'extension'  /* nature of update request. leave this line alone */				));			}		}	}	/* Provide way to call the singleton instance */	function Home_Page_Lander()	{		return Home_Page_Lander::instance();	}	$Home_Page_Lander = Home_Page_Lander();}?>